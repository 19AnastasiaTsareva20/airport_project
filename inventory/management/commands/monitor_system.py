# inventory/management/commands/monitor_system.py
import time
import json
from datetime import datetime, timedelta
from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.conf import settings
from io import StringIO
from inventory.monitoring import SystemMonitor

class Command(BaseCommand):
    help = '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'

    def add_arguments(self, parser):
        parser.add_argument(
            '--continuous',
            action='store_true',
            help='–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ü–∏–∫–ª–µ)',
        )
        parser.add_argument(
            '--interval',
            type=int,
            default=300,
            help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 300)',
        )
        parser.add_argument(
            '--log-file',
            type=str,
            help='–§–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
        )
        parser.add_argument(
            '--alert-threshold',
            type=int,
            default=80,
            help='–ü–æ—Ä–æ–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 80%)',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üîç –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...')
        )
        
        monitor = SystemMonitor()
        
        if options['continuous']:
            self.run_continuous_monitoring(monitor, options)
        else:
            self.run_single_check(monitor, options)

    def run_single_check(self, monitor, options):
        """–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        self.stdout.write('–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã...')
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        self.stdout.write('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...')
        system_health = monitor.check_system_health()
        self.display_system_health(system_health, options['alert_threshold'])
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.stdout.write('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
        db_health = monitor.check_database_health()
        self.display_db_health(db_health)
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∑–∫–∏—Ö –∑–∞–ø–∞—Å–æ–≤
        self.stdout.write('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤...')
        low_stock = monitor.check_low_stock_products()
        self.display_stock_status(low_stock)
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.stdout.write('\n4. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...')
        self.run_security_check()
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.stdout.write('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...')
        self.run_performance_check()
        
        # 6. –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
        self.stdout.write('\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ–≥–æ–≤...')
        self.check_log_size()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        if options['log_file']:
            self.save_monitoring_report(options['log_file'], {
                'timestamp': datetime.now().isoformat(),
                'system_health': system_health,
                'db_health': db_health,
                'low_stock_count': low_stock.count(),
            })

    def run_continuous_monitoring(self, monitor, options):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        interval = options['interval']
        
        self.stdout.write(
            f'–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval} —Å–µ–∫—É–Ω–¥'
        )
        self.stdout.write('–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C')
        
        try:
            while True:
                self.stdout.write(f'\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ {datetime.now().strftime("%H:%M:%S")} ---')
                
                # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
                system_health = monitor.check_system_health()
                self.display_system_health(system_health, options['alert_threshold'])
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
                if (system_health.get('cpu_usage', 0) > options['alert_threshold'] or
                    system_health.get('memory_usage', 0) > options['alert_threshold']):
                    self.stdout.write(
                        self.style.ERROR('‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –°–ò–°–¢–ï–ú–´!')
                    )
                
                time.sleep(interval)
                
        except KeyboardInterrupt:
            self.stdout.write(self.style.SUCCESS('\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'))

    def display_system_health(self, health_data, threshold):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        cpu = health_data.get('cpu_usage', 0)
        memory = health_data.get('memory_usage', 0)
        disk = health_data.get('disk_usage', 0)
        
        def get_status_style(value):
            if value > threshold:
                return self.style.ERROR
            elif value > threshold * 0.7:
                return self.style.WARNING
            else:
                return self.style.SUCCESS
        
        self.stdout.write(f"   CPU: {get_status_style(cpu)(f'{cpu:.1f}%')}")
        self.stdout.write(f"   –ü–∞–º—è—Ç—å: {get_status_style(memory)(f'{memory:.1f}%')}")
        self.stdout.write(f"   –î–∏—Å–∫: {get_status_style(disk)(f'{disk:.1f}%')}")

    def display_db_health(self, db_health):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î"""
        status = db_health.get('status', 'unknown')
        
        if status == 'healthy':
            self.stdout.write(self.style.SUCCESS(f"   –°—Ç–∞—Ç—É—Å: {status}"))
            self.stdout.write(f"   –¢–æ–≤–∞—Ä—ã: {db_health.get('products', 0)}")
            self.stdout.write(f"   –ó–∞–∫–∞–∑—ã: {db_health.get('orders', 0)}")
            self.stdout.write(f"   –ö–ª–∏–µ–Ω—Ç—ã: {db_health.get('customers', 0)}")
        else:
            self.stdout.write(self.style.ERROR(f"   –°—Ç–∞—Ç—É—Å: {status}"))
            error = db_health.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            self.stdout.write(self.style.ERROR(f"   –û—à–∏–±–∫–∞: {error}"))

    def display_stock_status(self, low_stock_products):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤"""
        count = low_stock_products.count()
        
        if count == 0:
            self.stdout.write(self.style.SUCCESS("   –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ"))
        else:
            self.stdout.write(self.style.WARNING(f"   –¢–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º: {count}"))
            for product in low_stock_products[:5]:
                self.stdout.write(f"   - {product.name}: {product.stock_quantity}")

    def run_security_check(self):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            out = StringIO()
            call_command('test_security', stdout=out, skip_rate_limit=True)
            output = out.getvalue()
            
            if 'FAILED' in output:
                self.stdout.write(self.style.WARNING("   –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"))
            else:
                self.stdout.write(self.style.SUCCESS("   –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –ø–æ—Ä—è–¥–∫–µ"))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"   –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}"))

    def run_performance_check(self):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            out = StringIO()
            call_command('performance_monitor', duration=10, interval=5, stdout=out)
            output = out.getvalue()
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –≤—ã–≤–æ–¥–∞
            if 'WARNING' in output or 'ERROR' in output:
                self.stdout.write(self.style.WARNING("   –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"))
            else:
                self.stdout.write(self.style.SUCCESS("   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ"))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"   –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}"))

    def check_log_size(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ–≥–æ–≤"""
        logs_dir = settings.BASE_DIR / 'logs'
        
        if not logs_dir.exists():
            self.stdout.write("   –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        total_size = 0
        for log_file in logs_dir.glob('*.log'):
            total_size += log_file.stat().st_size
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MB
        size_mb = total_size / (1024 * 1024)
        
        if size_mb > 100:  # –ë–æ–ª—å—à–µ 100 MB
            self.stdout.write(self.style.WARNING(f"   –†–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤: {size_mb:.1f} MB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞)"))
        else:
            self.stdout.write(self.style.SUCCESS(f"   –†–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤: {size_mb:.1f} MB"))

    def save_monitoring_report(self, filename, data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            with open(filename, 'a', encoding='utf-8') as f:
                f.write(json.dumps(data, ensure_ascii=False) + '\n')
            
            self.stdout.write(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}"))
