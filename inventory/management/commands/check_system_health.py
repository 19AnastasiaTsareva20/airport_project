import json
from django.core.management.base import BaseCommand
from inventory.monitoring import SystemMonitor

class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'

    def add_arguments(self, parser):
        parser.add_argument(
            '--format',
            type=str,
            choices=['json', 'text'],
            default='text',
            help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (json –∏–ª–∏ text)',
        )
        parser.add_argument(
            '--alert',
            action='store_true',
            help='–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º',
        )

    def handle(self, *args, **options):
        monitor = SystemMonitor()
        
        self.stdout.write(
            self.style.SUCCESS('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...')
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        system_health = monitor.check_system_health()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_health = monitor.check_database_health()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º
        low_stock_products = monitor.check_low_stock_products()
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = {
            'system': system_health,
            'database': db_health,
            'low_stock_count': low_stock_products.count(),
            'low_stock_products': [
                {
                    'id': p.id,
                    'name': p.name,
                    'stock': p.stock_quantity
                } for p in low_stock_products[:10]
            ]
        }
        
        # –í—ã–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        if options['format'] == 'json':
            self.stdout.write(json.dumps(report, indent=2, ensure_ascii=False))
        else:
            self.display_text_report(report)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if (system_health.get('cpu_usage', 0) > 90 or 
            system_health.get('memory_usage', 0) > 90 or
            db_health.get('status') != 'healthy' or
            low_stock_products.count() > 5):
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è')
            )
            return 1
        else:
            self.stdout.write(
                self.style.SUCCESS('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ')
            )
            return 0

    def display_text_report(self, report):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        
        self.stdout.write(self.style.HTTP_INFO('\n=== –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –°–ò–°–¢–ï–ú–´ ==='))
        
        # –°–∏—Å—Ç–µ–º–∞
        system = report['system']
        self.stdout.write(f"\nüñ•Ô∏è  –°–∏—Å—Ç–µ–º–∞:")
        self.stdout.write(f"   CPU: {system.get('cpu_usage', 0):.1f}%")
        self.stdout.write(f"   –ü–∞–º—è—Ç—å: {system.get('memory_usage', 0):.1f}%")
        self.stdout.write(f"   –î–∏—Å–∫: {system.get('disk_usage', 0):.1f}%")
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        db = report['database']
        status_color = self.style.SUCCESS if db.get('status') == 'healthy' else self.style.ERROR
        self.stdout.write(f"\nüóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:")
        self.stdout.write(f"   –°—Ç–∞—Ç—É—Å: {status_color(db.get('status', 'unknown'))}")
        if db.get('status') == 'healthy':
            self.stdout.write(f"   –¢–æ–≤–∞—Ä—ã: {db.get('products', 0)}")
            self.stdout.write(f"   –ó–∞–∫–∞–∑—ã: {db.get('orders', 0)}")
            self.stdout.write(f"   –ö–ª–∏–µ–Ω—Ç—ã: {db.get('customers', 0)}")
        
        # –ù–∏–∑–∫–∏–µ –∑–∞–ø–∞—Å—ã
        low_stock_count = report['low_stock_count']
        self.stdout.write(f"\nüì¶ –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º: {low_stock_count}")
        
        if low_stock_count > 0:
            self.stdout.write("   –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è:")
            for product in report['low_stock_products']:
                self.stdout.write(
                    f"   - {product['name']}: {product['stock']} –µ–¥."
                )
        
        self.stdout.write(f"\n{'='*50}")
