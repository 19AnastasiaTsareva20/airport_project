import time
import requests
from django.core.management.base import BaseCommand
from django.test import Client
from django.contrib.auth.models import User
from django.urls import reverse
from django.conf import settings
from django.core.cache import cache
from inventory.tests.factories import ProductFactory, CustomerFactory, OrderFactory

class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞'

    def add_arguments(self, parser):
        parser.add_argument(
            '--full',
            action='store_true',
            help='–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤–∫–ª—é—á–∞—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã)',
        )
        parser.add_argument(
            '--skip-rate-limit',
            action='store_true',
            help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã rate limiting',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üîí –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...')
        )
        
        # –°—á–µ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
        passed = 0
        failed = 0
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        tests = [
            self.test_csrf_protection,
            self.test_security_headers,
            self.test_authentication_required,
            self.test_admin_access_control,
            self.test_input_validation,
            self.test_logging_system,
            self.test_monitoring_commands,
        ]
        
        if not options['skip_rate_limit']:
            tests.append(self.test_rate_limiting)
        
        if options['full']:
            tests.extend([
                self.test_load_handling,
                self.test_error_handling,
                self.test_data_integrity,
            ])
        
        for test in tests:
            try:
                test()
                passed += 1
                self.stdout.write(f"‚úÖ {test.__name__}: PASSED")
            except Exception as e:
                failed += 1
                self.stdout.write(
                    self.style.ERROR(f"‚ùå {test.__name__}: FAILED - {str(e)}")
                )
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.display_summary(passed, failed)
        
        return 0 if failed == 0 else 1

    def test_csrf_protection(self):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç CSRF –∞—Ç–∞–∫"""
        client = Client(enforce_csrf_checks=True)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.create_user('testuser', 'test@test.com', 'testpass')
        client.login(username='testuser', password='testpass')
        
        # –ü–æ–ø—ã—Ç–∫–∞ POST –±–µ–∑ CSRF —Ç–æ–∫–µ–Ω–∞
        response = client.post(reverse('inventory:product_create'), {
            'name': 'Test Product',
            'price': '100.00',
            'stock_quantity': '10'
        })
        
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è CSRF —Ç–æ–∫–µ–Ω–∞
        if response.status_code not in [403, 400]:
            raise Exception(f"CSRF protection failed. Status: {response.status_code}")

    def test_security_headers(self):
        """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        client = Client()
        response = client.get(reverse('inventory:home'))
        
        required_headers = [
            'X-Content-Type-Options',
            'X-Frame-Options',
            'X-XSS-Protection',
            'Referrer-Policy'
        ]
        
        for header in required_headers:
            if header not in response:
                raise Exception(f"Missing security header: {header}")

    def test_authentication_required(self):
        """–¢–µ—Å—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
        client = Client()
        
        protected_urls = [
            'inventory:product_create',
        ]
        
        for url_name in protected_urls:
            response = client.get(reverse(url_name))
            if response.status_code != 302:  # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                raise Exception(f"Authentication not required for {url_name}")

    def test_admin_access_control(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        client = Client()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.create_user('normaluser', 'normal@test.com', 'testpass')
        client.login(username='normaluser', password='testpass')
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
        product = ProductFactory()
        
        # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        response = client.post(reverse('inventory:product_delete', args=[product.id]))
        
        if response.status_code != 403:
            raise Exception("Admin access control failed")

    def test_input_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        client = Client()
        user = User.objects.create_user('testuser2', 'test2@test.com', 'testpass')
        client.login(username='testuser2', password='testpass')
        
        # –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
        response = client.get(reverse('inventory:product_create'))
        csrf_token = response.context['csrf_token']
        
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        invalid_data = [
            {'name': '', 'price': '100', 'stock_quantity': '10'},  # –ü—É—Å—Ç–æ–µ –∏–º—è
            {'name': 'Test', 'price': '-100', 'stock_quantity': '10'},  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞
            {'name': 'Test', 'price': '100', 'stock_quantity': '-10'},  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            {'name': 'A' * 300, 'price': '100', 'stock_quantity': '10'},  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è
        ]
        
        for data in invalid_data:
            data['csrfmiddlewaretoken'] = csrf_token
            response = client.post(reverse('inventory:product_create'), data)
            
            # –§–æ—Ä–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π
            if response.status_code == 302:  # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
                raise Exception(f"Input validation failed for data: {data}")

    def test_rate_limiting(self):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
        client = Client()
        
        # –û—á–∏—â–∞–µ–º –∫–µ—à
        cache.clear()
        
        # –î–µ–ª–∞–µ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
        url = reverse('inventory:ajax_product_search')
        
        for i in range(70):  # –õ–∏–º–∏—Ç 60/—á–∞—Å –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö
            response = client.get(url, {'q': f'test{i}'})
            
            if i > 60 and response.status_code == 403:
                # Rate limiting —Å—Ä–∞–±–æ—Ç–∞–ª
                return
        
        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, rate limiting –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        raise Exception("Rate limiting not working properly")

    def test_logging_system(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import logging
        import tempfile
        import os
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–∞
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.log') as f:
            temp_log_file = f.name
        
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
            logger = logging.getLogger('test_security')
            handler = logging.FileHandler(temp_log_file)
            logger.addHandler(handler)
            logger.setLevel(logging.INFO)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_message = "Test security log message"
            logger.info(test_message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å
            with open(temp_log_file, 'r') as f:
                content = f.read()
                if test_message not in content:
                    raise Exception("Logging system not working")
        
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_log_file)

    def test_monitoring_commands(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        from django.core.management import call_command
        from io import StringIO
        
        # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        out = StringIO()
        try:
            call_command('check_system_health', stdout=out)
            output = out.getvalue()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫
            if 'ERROR' in output.upper() or 'EXCEPTION' in output.upper():
                raise Exception("System health check command failed")
        
        except Exception as e:
            if "Command 'check_system_health' not found" not in str(e):
                raise e

    def test_load_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏"""
        client = Client()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        ProductFactory.create_batch(50)
        
        start_time = time.time()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        for i in range(20):
            response = client.get(reverse('inventory:product_list'))
            if response.status_code != 200:
                raise Exception(f"Load test failed on request {i}")
        
        end_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
        avg_response_time = (end_time - start_time) / 20
        if avg_response_time > 2.0:  # 2 —Å–µ–∫—É–Ω–¥—ã –º–∞–∫—Å–∏–º—É–º
            raise Exception(f"Poor performance: {avg_response_time:.2f}s average")

    def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        client = Client()
        
        # –¢–µ—Å—Ç 404 –æ—à–∏–±–∫–∏
        response = client.get('/nonexistent-page/')
        if response.status_code != 404:
            raise Exception("404 error handling failed")
        
        # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        response = client.get(reverse('inventory:product_detail', args=[99999]))
        if response.status_code != 404:
            raise Exception("Product not found error handling failed")

    def test_data_integrity(self):
        """–¢–µ—Å—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        from django.db import transaction, IntegrityError
        
        # –¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è)
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å unique constraint)
            ProductFactory(name="Test Unique Product")
            # –ï—Å–ª–∏ unique constraint –µ—Å—Ç—å, —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É
            # ProductFactory(name="Test Unique Product")
        except IntegrityError:
            # –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ, –µ—Å–ª–∏ –µ—Å—Ç—å unique constraint
            pass
        
        # –¢–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        try:
            with transaction.atomic():
                product = ProductFactory(stock_quantity=100)
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                if product.stock_quantity == 100:
                    # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–∫–∞—Ç–∏—Ç—å—Å—è
                    raise Exception("Test rollback")
        except Exception:
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∏–∑-–∑–∞ –æ—Ç–∫–∞—Ç–∞

    def display_summary(self, passed, failed):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        total = passed + failed
        
        self.stdout.write(self.style.HTTP_INFO('\n' + '='*50))
        self.stdout.write(self.style.HTTP_INFO('–û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò'))
        self.stdout.write(self.style.HTTP_INFO('='*50))
        
        self.stdout.write(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        self.stdout.write(self.style.SUCCESS(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}"))
        
        if failed > 0:
            self.stdout.write(self.style.ERROR(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}"))
        else:
            self.stdout.write(self.style.SUCCESS("–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: 0"))
        
        success_rate = (passed / total * 100) if total > 0 else 0
        self.stdout.write(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        if failed == 0:
            self.stdout.write(self.style.SUCCESS('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!'))
        else:
            self.stdout.write(self.style.WARNING('\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!'))
        
        self.stdout.write('='*50)
