// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
document.addEventListener('DOMContentLoaded', function() {
    console.log('‚úÖ JavaScript –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞!');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    initializeActionButtons();
    initializeToasts();
    initializeFilters();
    initializeExportButtons();
    initializeRefreshButtons();
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    setTimeout(() => {
        showToast('üè≠ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!', 'success');
    }, 1000);
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if (window.location.pathname === '/' || window.location.pathname === '/home/') {
        console.log('üìä –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∫–ª—é—á–µ–Ω–æ');
        setInterval(refreshDashboardStats, 60000); // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }
});

// ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –î–ï–ô–°–¢–í–ò–ô =====
function initializeActionButtons() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π...');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ onclick
    const buttonsWithOnclick = document.querySelectorAll('[onclick]');
    buttonsWithOnclick.forEach(btn => {
        if (btn.getAttribute('onclick').includes('handleAction')) {
            btn.removeAttribute('onclick');
        }
    });
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ event delegation
    document.addEventListener('click', function(e) {
        const button = e.target.closest('.action-btn');
        if (button) {
            e.preventDefault();
            e.stopPropagation();
            
            const action = button.dataset.action;
            const type = button.dataset.type;
            const id = button.dataset.id;
            const name = button.dataset.name || '';
            
            console.log('üéØ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞:', { action, type, id, name });
            handleAction(action, type, id, name);
        }
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    setTimeout(() => {
        const actionButtons = document.querySelectorAll('.action-btn');
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${actionButtons.length} –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π`);
        
        actionButtons.forEach((button, index) => {
            if (!button.hasAttribute('data-listener-added')) {
                button.setAttribute('data-listener-added', 'true');
                
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    const action = this.dataset.action;
                    const type = this.dataset.type;
                    const id = this.dataset.id;
                    const name = this.dataset.name || '';
                    
                    console.log(`üéØ –ü—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ${index + 1}:`, { action, type, id, name });
                    handleAction(action, type, id, name);
                });
                
                console.log(`‚úÖ –ö–Ω–æ–ø–∫–∞ ${index + 1} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: ${button.dataset.action} ${button.dataset.type}`);
            }
        });
    }, 500);
}

function handleAction(action, type, id, name) {
    const typeNames = {
        'product': '—Ç–æ–≤–∞—Ä–∞',
        'customer': '–∫–ª–∏–µ–Ω—Ç–∞', 
        'order': '–∑–∞–∫–∞–∑–∞'
    };
    
    const typeName = typeNames[type] || type;
    const itemName = name || `#${id}`;
    
    console.log(`üé¨ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ: ${action} –¥–ª—è ${typeName} ${itemName}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    const button = document.querySelector(`[data-action="${action}"][data-id="${id}"]`);
    if (button) {
        button.style.transform = 'scale(0.95)';
        setTimeout(() => {
            button.style.transform = 'scale(1)';
        }, 150);
    }
    
    switch(action) {
        case 'edit':
            showToast(`üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${typeName} ${itemName}`, 'primary');
            console.log(`–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${typeName} —Å ID: ${id}`);
            break;
            
        case 'view':
            showToast(`üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä ${typeName} ${itemName}`, 'info');
            console.log(`–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ${typeName} —Å ID: ${id}`);
            break;
            
        case 'orders':
            showToast(`üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞: ${name}`, 'info');
            console.log(`–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–∫–∞–∑–∞–º –∫–ª–∏–µ–Ω—Ç–∞ —Å ID: ${id}`);
            break;
            
        case 'process':
            if (confirm(`–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑ #${id}?`)) {
                showToast(`‚úÖ –ó–∞–∫–∞–∑ #${id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`, 'success');
                console.log(`–ó–∞–∫–∞–∑ ${id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π`);
                
                // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                const statusCell = document.querySelector(`tr[data-order-id="${id}"] .badge`);
                if (statusCell) {
                    statusCell.className = 'badge bg-info';
                    statusCell.textContent = '–û–±—Ä–∞–±–æ—Ç–∞–Ω';
                }
            }
            break;
            
        case 'delete':
            const confirmMessage = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${typeName} ${itemName}?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`;
            if (confirm(confirmMessage)) {
                showToast(`üóëÔ∏è ${typeName} ${itemName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`, 'warning');
                console.log(`${typeName} —Å ID ${id} –ø–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);
                
                // –ò–º–∏—Ç–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                const row = document.querySelector(`tr[data-${type}-id="${id}"]`);
                if (row) {
                    row.style.opacity = '0.5';
                    row.style.textDecoration = 'line-through';
                }
            }
            break;
            
        default:
            showToast(`‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏–µ "${action}" –¥–ª—è ${typeName} ${itemName}`, 'secondary');
            console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
    }
}

// ===== –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====
function showToast(message, type = 'info') {
    const toastContainer = document.getElementById('toast-container') || createToastContainer();
    
    const toastId = 'toast-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
    
    const typeColors = {
        'primary': 'primary',
        'success': 'success',
        'info': 'info',
        'warning': 'warning',
        'danger': 'danger',
        'secondary': 'secondary'
    };
    
    const toastType = typeColors[type] || 'info';
    
    const toastHTML = `
        <div class="toast align-items-center text-bg-${toastType} border-0 fade-in" role="alert" id="${toastId}">
            <div class="d-flex">
                <div class="toast-body">
                    <strong>${message}</strong>
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="–ó–∞–∫—Ä—ã—Ç—å"></button>
            </div>
        </div>
    `;
    
    toastContainer.insertAdjacentHTML('beforeend', toastHTML);
    
    const toastElement = document.getElementById(toastId);
    const toast = new bootstrap.Toast(toastElement, {
        autohide: true,
        delay: 4000
    });
    
    toast.show();
    
    toastElement.addEventListener('hidden.bs.toast', function() {
        if (toastElement.parentNode) {
            toastElement.remove();
        }
    });
    
    console.log(`üí¨ Toast –ø–æ–∫–∞–∑–∞–Ω: ${message} (${type})`);
}

function createToastContainer() {
    const container = document.createElement('div');
    container.id = 'toast-container';
    container.className = 'toast-container position-fixed top-0 end-0 p-3';
    container.style.zIndex = '9999';
    document.body.appendChild(container);
    console.log('üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω');
    return container;
}

function initializeToasts() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Django messages –∫–∞–∫ toasts
    const messages = document.querySelectorAll('.django-message');
    messages.forEach(function(message) {
        const type = message.dataset.type || 'info';
        showToast(message.textContent.trim(), type);
        message.remove();
    });
    
    console.log(`üì® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${messages.length} —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
}

// ===== –†–ê–ë–û–¢–ê –° –§–ò–õ–¨–¢–†–ê–ú–ò =====
function initializeFilters() {
    console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤...');
    
    // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const clearButtons = document.querySelectorAll('button[onclick*="clearFilters"]');
    clearButtons.forEach(button => {
        button.removeAttribute('onclick');
        button.addEventListener('click', function(e) {
            e.preventDefault();
            clearFilters();
        });
        console.log('üßπ –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    });
    
    // –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ select-–æ–≤ —Å –∫–ª–∞—Å—Å–æ–º auto-submit
    document.addEventListener('change', function(e) {
        if (e.target.matches('.auto-submit')) {
            console.log('üîÑ –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤');
            e.target.closest('form').submit();
        }
    });
}

function clearFilters() {
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤...');
    
    const form = document.querySelector('.filter-form form');
    if (!form) {
        console.error('‚ùå –§–æ—Ä–º–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        showToast('‚ùå –§–æ—Ä–º–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'danger');
        return;
    }
    
    const inputs = form.querySelectorAll('input, select');
    let clearedCount = 0;
    let fieldsClearedList = [];
    
    inputs.forEach(input => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
        if (input.name === 'csrfmiddlewaretoken') return;
        
        let wasCleared = false;
        
        if (input.type === 'text' || input.type === 'number' || input.type === 'date') {
            if (input.value.trim() !== '') {
                input.value = '';
                wasCleared = true;
            }
        } else if (input.tagName === 'SELECT') {
            if (input.selectedIndex > 0) {
                input.selectedIndex = 0;
                wasCleared = true;
            }
        }
        
        if (wasCleared) {
            clearedCount++;
            fieldsClearedList.push(input.name || input.id || '–ø–æ–ª–µ');
            
            // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            input.classList.add('highlight');
            setTimeout(() => {
                input.classList.remove('highlight');
            }, 1000);
        }
    });
    
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ –ø–æ–ª–µ–π: ${clearedCount}`, fieldsClearedList);
    
    if (clearedCount > 0) {
        showToast(`üßπ –û—á–∏—â–µ–Ω–æ ${clearedCount} —Ñ–∏–ª—å—Ç—Ä(–æ–≤)`, 'info');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏');
            form.submit();
        }, 800);
    } else {
        showToast('‚ÑπÔ∏è –§–∏–ª—å—Ç—Ä—ã —É–∂–µ –æ—á–∏—â–µ–Ω—ã', 'info');
    }
}

// ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====
function refreshDashboardStats() {
    console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞...');
    showToast('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...', 'info');
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const statCards = document.querySelectorAll('.stats-card, .card');
    statCards.forEach((card, index) => {
        setTimeout(() => {
            card.style.transform = 'scale(1.02)';
            card.style.transition = 'transform 0.3s ease';
            
            setTimeout(() => {
                card.style.transform = 'scale(1)';
            }, 300);
        }, index * 100);
    });
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
    setTimeout(() => {
        updateRandomStats();
        showToast('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success');
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    }, 1500);
}

function updateRandomStats() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    const statElements = [
        { id: 'total-products', base: 12, variation: 3 },
        { id: 'total-customers', base: 5, variation: 2 },
        { id: 'active-orders', base: 10, variation: 5 },
        { id: 'total-sales', base: 3584, variation: 500, prefix: '$', decimals: 2 }
    ];
    
    statElements.forEach(stat => {
        const element = document.getElementById(stat.id);
        if (element) {
            const randomChange = (Math.random() - 0.5) * stat.variation;
            const newValue = stat.base + randomChange;
            
            let displayValue;
            if (stat.prefix) {
                displayValue = stat.prefix + newValue.toFixed(stat.decimals || 0);
            } else {
                displayValue = Math.round(newValue).toString();
            }
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
            element.style.transform = 'scale(1.1)';
            element.style.color = '#007bff';
            
            setTimeout(() => {
                element.textContent = displayValue;
                element.style.transform = 'scale(1)';
                element.style.color = '';
            }, 200);
        }
    });
}

// ===== –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• =====
function initializeExportButtons() {
    console.log('üì§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞...');
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    const exportButtons = document.querySelectorAll('[onclick*="exportData"]');
    exportButtons.forEach(button => {
        const onclick = button.getAttribute('onclick');
        button.removeAttribute('onclick');
        
        button.addEventListener('click', function(e) {
            e.preventDefault();
            // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ onclick
            const matches = onclick.match(/exportData\('([^']+)',\s*'([^']+)'\)/);
            if (matches) {
                exportData(matches[1], matches[2]);
            }
        });
    });
}

function exportData(format, type) {
    console.log(`üìÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö: ${format} –¥–ª—è ${type}`);
    showToast(`üìÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format.toUpperCase()}...`, 'info');
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    setTimeout(() => {
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π —Ñ–∞–π–ª)
        const currentUrl = new URL(window.location);
        currentUrl.searchParams.set('export', format);
        currentUrl.searchParams.set('type', type);
        
        console.log(`üìÅ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞: ${type}_export.${format}`);
        showToast(`‚úÖ –§–∞–π–ª ${type}_export.${format} –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!`, 'success');
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π download
        // window.open(currentUrl.toString(), '_blank');
    }, 2000);
}

// ===== –ö–ù–û–ü–ö–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø =====
function initializeRefreshButtons() {
    const refreshButtons = document.querySelectorAll('[onclick*="refreshDashboardStats"]');
    refreshButtons.forEach(button => {
        button.removeAttribute('onclick');
        button.addEventListener('click', function(e) {
            e.preventDefault();
            refreshDashboardStats();
        });
    });
    
    console.log(`üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${refreshButtons.length} –∫–Ω–æ–ø–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
}

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
window.clearFilters = clearFilters;
window.refreshDashboardStats = refreshDashboardStats;
window.exportData = exportData;
window.handleAction = handleAction;
window.showToast = showToast;

// ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö =====
window.addEventListener('error', function(e) {
    console.error('üí• JavaScript Error:', e.error);
    showToast('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ JavaScript. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.', 'danger');
});

window.addEventListener('unhandledrejection', function(e) {
    console.error('üí• Unhandled Promise Rejection:', e.reason);
    showToast('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–¥–µ.', 'danger');
});

// ===== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
console.log('üéì –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:', {
    'clearFilters': '–û—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤',
    'refreshDashboardStats': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
    'exportData': '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
    'handleAction': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∫–Ω–æ–ø–æ–∫',
    'showToast': '–ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
});
